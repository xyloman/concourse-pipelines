jobs:
- name: regulator
  plan:
  - get: schedule
    trigger: true
  - get: ((product_slug))
    params:
      globs: []

- name: sandbox
  plan:
  - aggregate:
    - do:
      - get: pcf-pipelines-tarball
      - task: unpack-tarball
        config: {<<: *unpack-tarball-params}
    - get: pivnet-product
      passed: [regulator]
      trigger: true
      resource: ((product_slug))
      params:
        globs: [((product_globs_sandbox))]
  - task: wait-opsman-clear
    file: pcf-pipelines/tasks/wait-opsman-clear/task.yml
    params: { <<: *opsman-credentials-sandbox }
  - task: upload-tile-and-stemcell
    file: pcf-pipelines/tasks/upload-product-and-stemcell/task.yml
    params:
      IAAS: ((foundations.sandbox.iaas_type))
      NO_PROXY: ""
      OM_IP: ""
      OPS_MGR_PWD: ((foundations.sandbox.opsman.admin.password))
      OPS_MGR_USR: ((foundations.sandbox.opsman.admin.username))
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((foundations.sandbox.opsman.domain_or_ip_address))
      PIVNET_API_TOKEN: ((pivnet_token))
  - task: stage-tile
    config: { <<: *stage-task-params }
    params: { <<: *opsman-credentials-sandbox }
  - task: apply-changes
    file: pcf-pipelines/tasks/apply-changes/task.yml
    params: { <<: *opsman-credentials-sandbox }

- name: non-prod
  plan:
  - aggregate:
    - do:
      - get: pcf-pipelines-tarball
      - task: unpack-tarball
        config: { <<: *unpack-tarball-params }
    - get: pivnet-product
      passed: [sandbox]
      resource: ((product_slug))
      params:
        globs: [((product_globs))]
  - task: wait-opsman-clear
    file: pcf-pipelines/tasks/wait-opsman-clear/task.yml
    params: { <<: *opsman-credentials-non-prod }
  - task: upload-tile-and-stemcell
    file: pcf-pipelines/tasks/upload-product-and-stemcell/task.yml
    params:
      IAAS: ((foundations.non-prod.iaas_type))
      NO_PROXY: ""
      OM_IP: ""
      OPS_MGR_PWD: ((foundations.non-prod.opsman.admin.password))
      OPS_MGR_USR: ((foundations.non-prod.opsman.admin.username))
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((foundations.non-prod.opsman.domain_or_ip_address))
      PIVNET_API_TOKEN: ((pivnet_token))
  - task: stage-tile
    config: { <<: *stage-task-params }
    params: { <<: *opsman-credentials-non-prod }
  - task: apply-changes
    file: pcf-pipelines/tasks/apply-changes/task.yml
    params: { <<: *opsman-credentials-non-prod }

- name: prod
  plan:
  - aggregate:
    - do:
      - get: pcf-pipelines-tarball
      - task: unpack-tarball
        config: { <<: *unpack-tarball-params }
    - get: pivnet-product
      passed: [non-prod]
      resource: ((product_slug))
      params:
        globs: [((product_globs))]
  - task: wait-opsman-clear
    file: pcf-pipelines/tasks/wait-opsman-clear/task.yml
    params: { <<: *opsman-credentials-prod }
  - task: upload-tile-and-stemcell
    file: pcf-pipelines/tasks/upload-product-and-stemcell/task.yml
    params:
      IAAS: ((foundations.prod.iaas_type))
      NO_PROXY: ""
      OM_IP: ""
      OPS_MGR_PWD: ((foundations.prod.opsman.admin.password))
      OPS_MGR_USR: ((foundations.prod.opsman.admin.username))
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((foundations.prod.opsman.domain_or_ip_address))
      PIVNET_API_TOKEN: ((pivnet_token))
  - task: stage-tile
    config: { <<: *stage-task-params }
    params: { <<: *opsman-credentials-prod }
  - task: apply-changes
    file: pcf-pipelines/tasks/apply-changes/task.yml
    params: { <<: *opsman-credentials-prod }
  - task: delete-unused-products
    config: { <<: *delete-unused-products }
    params: { <<: *opsman-credentials-prod }

resources:
- name: pcf-pipelines-tarball
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: pcf-automation
    product_version: ((pcf-automation-version))

- name: ((product_slug))
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((product_slug))
    product_version: ((product_version_regex))
    sort_by: semver

- name: schedule
  type: time
  source:
    days: [ Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday ]
    interval: 30m
    location: America/Los_Angeles
    start: 12:00 AM
    stop: 11:59 PM

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

opsman-credentials:
  sandbox: &opsman-credentials-sandbox
    OPSMAN_DOMAIN_OR_IP_ADDRESS: ((foundations.sandbox.opsman.domain_or_ip_address))
    OPSMAN_PASSWORD: ((foundations.sandbox.opsman.admin.password))
    OPSMAN_USERNAME: ((foundations.sandbox.opsman.admin.username))
  non-prod: &opsman-credentials-non-prod
    OPSMAN_DOMAIN_OR_IP_ADDRESS: ((foundations.non-prod.opsman.domain_or_ip_address))
    OPSMAN_PASSWORD: ((foundations.non-prod.opsman.admin.password))
    OPSMAN_USERNAME: ((foundations.non-prod.opsman.admin.username))
  prod: &opsman-credentials-prod
    OPSMAN_DOMAIN_OR_IP_ADDRESS: ((foundations.prod.opsman.domain_or_ip_address))
    OPSMAN_PASSWORD: ((foundations.prod.opsman.admin.password))
    OPSMAN_USERNAME: ((foundations.prod.opsman.admin.username))

unpack-tarball-params: &unpack-tarball-params
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: czero/cflinuxfs2
  run:
    path: bash
    args:
    - -c
    - tar -xvf pcf-pipelines-tarball/*.tgz
    dir: ""
  inputs:
  - name: pcf-pipelines-tarball
    path: ""
  outputs:
  - name: pcf-pipelines
    path: ""

delete-unused-products: &delete-unused-products
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: czero/cflinuxfs2
  params:
    OPSMAN_USERNAME:
    OPSMAN_PASSWORD:
    OPSMAN_DOMAIN_OR_IP_ADDRESS:        
  run:
    path: bash
    args:
    - -c 
    - |
      set -eu

      echo "Delete unused products on Ops Manager @ ${OPSMAN_DOMAIN_OR_IP_ADDRESS}"

      om-linux \
        --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
        --skip-ssl-validation \
        --username "${OPSMAN_USERNAME}" \
        --password "${OPSMAN_PASSWORD}" \
        delete-unused-products

  inputs:
  - name: pcf-pipelines

stage-task: &stage-task-params
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: czero/cflinuxfs2
  params:
    OPSMAN_USERNAME:
    OPSMAN_PASSWORD:
    OPSMAN_DOMAIN_OR_IP_ADDRESS:        
  run:
    path: bash
    args:
    - -c 
    - |
      desired_version=$(jq --raw-output '.Release.Version' < ./pivnet-product/metadata.json)

      AVAILABLE=$(om-linux \
        --skip-ssl-validation \
        --username "${OPSMAN_USERNAME}" \
        --password "${OPSMAN_PASSWORD}" \
        --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
        curl -path /api/v0/available_products)
      STAGED=$(om-linux \
        --skip-ssl-validation \
        --username "${OPSMAN_USERNAME}" \
        --password "${OPSMAN_PASSWORD}" \
        --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
        curl -path /api/v0/staged/products)

      # Should the slug contain more than one product, pick only the first.
      FILE_PATH=`find ./pivnet-product -name *.pivotal | sort | head -1`
      unzip $FILE_PATH metadata/*

      PRODUCT_NAME="$(cat metadata/*.yml | grep '^name' | cut -d' ' -f 2)"

      DEPLOYED=$(om-linux \
        --skip-ssl-validation \
        --username "${OPSMAN_USERNAME}" \
        --password "${OPSMAN_PASSWORD}" \
        --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
        deployed-products)

      if [[ $DEPLOYED == *" $PRODUCT_NAME | $desired_version "* ]]; then
        echo "Desired version $desired_version is already deployed of tile $PRODUCT_NAME"
        exit 0
      fi

      # Figure out which products are unstaged.
      UNSTAGED_ALL=$(jq -n --argjson available "$AVAILABLE" --argjson staged "$STAGED" \
        '$available - ($staged | map({"name": .type, "product_version": .product_version}))')

      UNSTAGED_PRODUCT=$(
      jq -n "$UNSTAGED_ALL" \
        "map(select(.name == \"$PRODUCT_NAME\")) | map(select(.product_version|startswith(\"$desired_version\")))"
      )

      # There should be only one such unstaged product.
      if [ "$(echo $UNSTAGED_PRODUCT | jq '. | length')" -ne "1" ]; then
        echo "Need exactly one unstaged build for $PRODUCT_NAME version $desired_version"
        jq -n "$UNSTAGED_PRODUCT"
        exit 1
      fi

      full_version=$(echo "$UNSTAGED_PRODUCT" | jq -r '.[].product_version')

      om-linux --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
        --skip-ssl-validation \
        --username "${OPSMAN_USERNAME}" \
        --password "${OPSMAN_PASSWORD}" \
        stage-product \
        --product-name "${PRODUCT_NAME}" \
        --product-version "${full_version}"

  inputs:
  - name: pcf-pipelines
  - name: pivnet-product